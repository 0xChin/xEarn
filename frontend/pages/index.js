import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";

export default function Home({ vaults }) {
  function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }

  function transformSymbol(symbol) {
    if (symbol === "crv3crypto") {
      return "Curve Tricrypto";
    }
    if (symbol === "MIM3CRV-f") {
      return "Curve MIM 3Pool";
    }
    return symbol;
  }

  const depositedAmount = numberWithCommas(
    vaults
      .reduce((total, vault) => total + vault.deposited * vault.price, 0)
      .toFixed(2)
  );

  return (
    <div className={styles.container}>
      <Head>
        <title>xEarn</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="apple-touch-icon"
          sizes="180x180"
          href="/apple-touch-icon.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href="/favicon-32x32.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="16x16"
          href="/favicon-16x16.png"
        />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
        <meta name="msapplication-TileColor" content="#00aba9" />
        <meta name="theme-color" content="#ffffff"></meta>
      </Head>

      <p className={styles.warning}>
        Warning! This project is an experiment, it's not audited and DEFINITELY
        has vulnerabilities. If you want to deposit in any vault you see, go to{" "}
        <a
          href="https://yearn.finance/vaults"
          target="_blank"
          className={styles.yearn}
        >
          Yearn Finance
        </a>
      </p>

      <header className={styles.header}>
        <img
          src="/logo.png"
          alt="Logo"
          width="50"
          className={styles.logoHeader}
        />
        <button className={styles.connect}>Connect wallet</button>
      </header>

      <main className={styles.main}>
        <div className={styles.balances}>
          <div className={styles.deposited}>
            <p className={styles.balanceText}>Deposited</p>
            <b className={styles.balanceAmount}>${depositedAmount}</b>
          </div>
          <div className={styles.earnings}>
            <p className={styles.balanceText}>Earnings</p>
            <b className={styles.balanceAmount}>$0,00</b>
          </div>
        </div>

        <div className={styles.vaults}>
          <h2 className={styles.vaultsText}>All Vaults</h2>
          <table className={styles.table}>
            <thead>
              <tr>
                <th>Token</th>
                <th>APY</th>
                <th>Deposited</th>
                <th>TVL</th>
              </tr>
            </thead>
            <tbody>
              {vaults.map((row, index) => (
                <tr key={index} className={styles.tableRow}>
                  <td width="50%" className={styles.tokenRow}>
                    <img src={row.icon} alt={row.token} width="40px" />{" "}
                    <p className={styles.tokenText}>
                      {transformSymbol(row.token)}
                    </p>
                  </td>
                  <td>{row.apy}%</td>
                  <td className={row.deposited > 0 ? "" : styles.depositZero}>
                    {row.deposited.toFixed(2)}
                  </td>
                  <td>${numberWithCommas(row.tvl)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://twitter.com/chiin_rock"
          target="_blank"
          rel="noopener noreferrer"
        >
          Made with âœ– by Chiin
        </a>
      </footer>
    </div>
  );
}

export async function getStaticProps() {
  const endpoints = [
    "https://api.yearn.finance/v1/chains/10/vaults/all",
    "https://api.yearn.finance/v1/chains/42161/vaults/all",
  ];

  const responses = await Promise.all(endpoints.map((url) => fetch(url)));
  const [data1, data2] = await Promise.all(responses.map((res) => res.json()));
  const combinedData = [...data1, ...data2];
  console.log(Math.random());

  const vaults = combinedData
    .map((vault) => ({
      token: vault.token.symbol,
      icon: vault.token.icon,
      apy: (vault.apy.net_apy * 100).toFixed(2),
      deposited: Math.random() > 0.5 ? 10 : 0,
      price: vault.tvl.price,
      tvl: vault.tvl.tvl.toFixed(0),
    }))
    .filter((vault) => parseFloat(vault.tvl) > 0);

  const uniqueVaults = vaults.reduce((acc, vault) => {
    const existingVault = acc.find((v) => v.token === vault.token);

    if (existingVault) {
      if (parseFloat(vault.tvl) > parseFloat(existingVault.tvl)) {
        const index = acc.indexOf(existingVault);
        acc[index] = vault;
      }
    } else {
      acc.push(vault);
    }

    return acc;
  }, []);

  uniqueVaults.sort((a, b) => parseFloat(b.apy) - parseFloat(a.apy));

  return {
    props: {
      vaults: uniqueVaults,
    },
  };
}
